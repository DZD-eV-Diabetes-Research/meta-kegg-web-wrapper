{"openapi": "3.1.0", "info": {"title": "MetaKegg REST API", "version": "0.0.0"}, "paths": {"/api/analysis": {"get": {"tags": ["Analysis Method"], "summary": "List Available Analysis Methods", "description": "List all MetaKEGG analysis methods available. The name will be used to start a anylsises pipeline run in endpoint `/pipeline/{pipeline_ticket_id}/run/...`", "operationId": "list_available_analysis_methods_api_analysis_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/MetaKeggPipelineAnalysisMethod"}, "type": "array", "title": "Response List Available Analysis Methods Api Analysis Get"}}}}}}}, "/api/pipeline": {"post": {"tags": ["Pipeline"], "summary": "Initialize A Metakegg Pipeline Run Defintion", "description": "Define a new meta Kegg pipeline run. The pipeline-run will not start immediatily but be queued. The response of this endpoint will be a ticket that can be used to track the status of your pipeline run.", "operationId": "initialize_a_metakegg_pipeline_run_defintion_api_pipeline_post", "parameters": [{"name": "sheet_name_paths", "in": "query", "required": false, "schema": {"type": "string", "description": "Sheet name containing the pathway information (see docs). Has to apply to all input files in case of multiple.", "default": "pathways", "title": "Sheet Name Paths"}, "description": "Sheet name containing the pathway information (see docs). Has to apply to all input files in case of multiple."}, {"name": "sheet_name_genes", "in": "query", "required": false, "schema": {"type": "string", "description": "Sheet name for gene information (see docs). Has to apply to all input files in case of multiple.", "default": "gene_metrics", "title": "Sheet Name Genes"}, "description": "Sheet name for gene information (see docs). Has to apply to all input files in case of multiple."}, {"name": "genes_column", "in": "query", "required": false, "schema": {"type": "string", "description": "Column name for gene symbols in the sheet_name_genes", "default": "gene_symbol", "title": "Genes Column"}, "description": "Column name for gene symbols in the sheet_name_genes"}, {"name": "log2fc_column", "in": "query", "required": false, "schema": {"type": "string", "description": "Column name for log2fc values in the sheet_name_genes", "default": "logFC", "title": "Log2Fc Column"}, "description": "Column name for log2fc values in the sheet_name_genes"}, {"name": "count_threshold", "in": "query", "required": false, "schema": {"type": "integer", "description": "Minimum number of genes per pathway, for pathway to be drawn. Default value : 2", "default": 2, "title": "Count Threshold"}, "description": "Minimum number of genes per pathway, for pathway to be drawn. Default value : 2"}, {"name": "pathway_pvalue", "in": "query", "required": false, "schema": {"type": "number", "description": "Raw p-value threshold for the pathways", "title": "Pathway Pvalue"}, "description": "Raw p-value threshold for the pathways"}, {"name": "input_label", "in": "query", "required": false, "schema": {"type": "string", "description": "Input label or list of labels for multiple inputs", "title": "Input Label"}, "description": "Input label or list of labels for multiple inputs"}, {"name": "folder_extension", "in": "query", "required": false, "schema": {"type": "string", "description": "Folder extension to be appended to the default naming scheme. If None and default folder exists, will overwrite folder", "title": "Folder Extension"}, "description": "Folder extension to be appended to the default naming scheme. If None and default folder exists, will overwrite folder"}, {"name": "methylation_path", "in": "query", "required": false, "schema": {"type": "string", "description": "Path to methylation data (Excel , CSV or TSV format)", "title": "Methylation Path"}, "description": "Path to methylation data (Excel , CSV or TSV format)"}, {"name": "methylation_pvalue", "in": "query", "required": false, "schema": {"type": "string", "description": "Column name for methylation p-value", "title": "Methylation Pvalue"}, "description": "Column name for methylation p-value"}, {"name": "methylation_genes", "in": "query", "required": false, "schema": {"type": "string", "description": "Column name for methylation gene symbols", "title": "Methylation Genes"}, "description": "Column name for methylation gene symbols"}, {"name": "methylation_pvalue_thresh", "in": "query", "required": false, "schema": {"type": "number", "description": "P-value threshold for the methylation values", "default": 0.05, "title": "Methylation Pvalue Thresh"}, "description": "P-value threshold for the methylation values"}, {"name": "methylation_probe_column", "in": "query", "required": false, "schema": {"type": "string", "description": "Column name for the methylation probes.", "title": "Methylation Probe Column"}, "description": "Column name for the methylation probes."}, {"name": "probes_to_cgs", "in": "query", "required": false, "schema": {"type": "string", "description": "If True, will correct the probes to positions, delete duplicated positions and keep the first CG.", "default": false, "title": "Probes To Cgs"}, "description": "If True, will correct the probes to positions, delete duplicated positions and keep the first CG."}, {"name": "miRNA_path", "in": "query", "required": false, "schema": {"type": "string", "description": "Path to miRNA data (Excel , CSV or TSV format)", "title": "Mirna Path"}, "description": "Path to miRNA data (Excel , CSV or TSV format)"}, {"name": "miRNA_pvalue", "in": "query", "required": false, "schema": {"type": "string", "description": "Column name for miRNA p-value", "title": "Mirna Pvalue"}, "description": "Column name for miRNA p-value"}, {"name": "miRNA_genes", "in": "query", "required": false, "schema": {"type": "string", "description": "Column name for miRNA gene symbols", "title": "Mirna Genes"}, "description": "Column name for miRNA gene symbols"}, {"name": "miRNA_pvalue_thresh", "in": "query", "required": false, "schema": {"type": "number", "description": "P-value threshold for the miRNA values", "default": 0.05, "title": "Mirna Pvalue Thresh"}, "description": "P-value threshold for the miRNA values"}, {"name": "miRNA_ID_column", "in": "query", "required": false, "schema": {"type": "string", "description": "Column name for the miRNA IDs.", "title": "Mirna Id Column"}, "description": "Column name for the miRNA IDs."}, {"name": "benjamini_threshold", "in": "query", "required": false, "schema": {"type": "number", "description": "Benjamini Hochberg p-value threshold for the pathway", "title": "Benjamini Threshold"}, "description": "Benjamini Hochberg p-value threshold for the pathway"}, {"name": "save_to_eps", "in": "query", "required": false, "schema": {"type": "string", "description": "True/False statement to save the maps and colorscales or legends as seperate .eps files in addition to the .pdf exports", "default": false, "title": "Save To Eps"}, "description": "True/False statement to save the maps and colorscales or legends as seperate .eps files in addition to the .pdf exports"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PipelineRunTicket"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/pipeline/{pipeline_ticket_id}/upload": {"post": {"tags": ["Pipeline"], "summary": "Attach File To Meta Kegg Pipeline Run", "description": "Add a file to an non started/queued pipeline-run definition", "operationId": "attach_file_to_meta_kegg_pipeline_run_api_pipeline__pipeline_ticket_id__upload_post", "requestBody": {"content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/Body_attach_file_to_meta_kegg_pipeline_run_api_pipeline__pipeline_ticket_id__upload_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PipelineRunTicket"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/pipeline/{pipeline_ticket_id}/run/{analysis_method_name}": {"get": {"tags": ["Pipeline"], "summary": "Start Pipeline Run", "description": "Check the status of a triggered pipeline run.", "operationId": "start_pipeline_run_api_pipeline__pipeline_ticket_id__run__analysis_method_name__get", "parameters": [{"name": "pipeline_ticket_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Pipeline Ticket Id"}}, {"name": "analysis_method_name", "in": "path", "required": true, "schema": {"enum": ["single_input_genes", "single_input_transcripts", "single_input_genes_bulk_mapping", "multiple_inputs", "single_input_with_methylation", "single_input_with_methylation_quantification", "single_input_with_miRNA", "single_input_with_miRNA_quantification", "single_input_with_methylation_and_miRNA"], "type": "string", "title": "Analysis Method Name"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PipelineRunStatus"}}}}, "404": {"description": "Pipeline-run could not be found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/mekeweserver__routes__Error__1"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/pipeline/{pipeline_ticket_id}/status": {"get": {"tags": ["Pipeline"], "summary": "Get Pipeline Run Status", "description": "Check the status of a triggered pipeline run.", "operationId": "get_pipeline_run_status_api_pipeline__pipeline_ticket_id__status_get", "parameters": [{"name": "pipeline_ticket_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Pipeline Ticket Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PipelineRunStatus"}}}}, "404": {"description": "Pipeline-run could not be found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/mekeweserver__routes__Error__2"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/pipeline/{pipeline_ticket_id}/result": {"get": {"tags": ["Pipeline"], "summary": "Download Pipeline Run Result", "description": "Download the result of a succeded pipeline run.", "operationId": "download_pipeline_run_result_api_pipeline__pipeline_ticket_id__result_get", "parameters": [{"name": "pipeline_ticket_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Pipeline Ticket Id"}}], "responses": {"200": {"description": "Successful Response"}, "404": {"description": "Pipeline-run could not be found.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/mekeweserver__routes__Error__3"}}}}, "410": {"description": "Pipeline-run expired and result is cleaned.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/mekeweserver__routes__Error__4"}}}}, "425": {"description": "Pipeline-run is not finished.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/mekeweserver__routes__Error__5"}}}}, "424": {"description": "Pipeline-run failed.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/mekeweserver__routes__Error__6"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/{path_name}": {"get": {"tags": ["Webclient"], "summary": "Serve Frontend", "description": "Client serving path", "operationId": "serve_frontend__path_name__get", "parameters": [{"name": "path_name", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Path Name"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"Body_attach_file_to_meta_kegg_pipeline_run_api_pipeline__pipeline_ticket_id__upload_post": {"properties": {"file": {"type": "string", "format": "binary", "title": "File"}}, "type": "object", "required": ["file"], "title": "Body_attach_file_to_meta_kegg_pipeline_run_api_pipeline__pipeline_ticket_id__upload_post"}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "MetaKeggPipelineAnalysisMethod": {"properties": {"name": {"type": "string", "title": "Name"}, "display_name": {"type": "string", "title": "Display Name"}, "internal_id": {"type": "integer", "title": "Internal Id"}, "desc": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Desc"}}, "type": "object", "required": ["name", "display_name", "internal_id"], "title": "MetaKeggPipelineAnalysisMethod"}, "MetaKeggPipelineInputParams": {"properties": {"sheet_name_paths": {"type": "string", "title": "Sheet Name Paths", "description": "Sheet name containing the pathway information (see docs). Has to apply to all input files in case of multiple.", "default": "pathways"}, "sheet_name_genes": {"type": "string", "title": "Sheet Name Genes", "description": "Sheet name for gene information (see docs). Has to apply to all input files in case of multiple.", "default": "gene_metrics"}, "genes_column": {"type": "string", "title": "Genes Column", "description": "Column name for gene symbols in the sheet_name_genes", "default": "gene_symbol"}, "log2fc_column": {"type": "string", "title": "Log2Fc Column", "description": "Column name for log2fc values in the sheet_name_genes", "default": "logFC"}, "count_threshold": {"type": "integer", "title": "Count Threshold", "description": "Minimum number of genes per pathway, for pathway to be drawn. Default value : 2", "default": 2}, "pathway_pvalue": {"type": "number", "title": "Pathway Pvalue", "description": "Raw p-value threshold for the pathways"}, "input_label": {"type": "string", "title": "Input Label", "description": "Input label or list of labels for multiple inputs"}, "folder_extension": {"type": "string", "title": "Folder Extension", "description": "Folder extension to be appended to the default naming scheme. If None and default folder exists, will overwrite folder"}, "methylation_path": {"type": "string", "title": "Methylation Path", "description": "Path to methylation data (Excel , CSV or TSV format)"}, "methylation_pvalue": {"type": "string", "title": "Methylation Pvalue", "description": "Column name for methylation p-value"}, "methylation_genes": {"type": "string", "title": "Methylation Genes", "description": "Column name for methylation gene symbols"}, "methylation_pvalue_thresh": {"type": "number", "title": "Methylation Pvalue Thresh", "description": "P-value threshold for the methylation values", "default": 0.05}, "methylation_probe_column": {"type": "string", "title": "Methylation Probe Column", "description": "Column name for the methylation probes."}, "probes_to_cgs": {"type": "string", "title": "Probes To Cgs", "description": "If True, will correct the probes to positions, delete duplicated positions and keep the first CG.", "default": false}, "miRNA_path": {"type": "string", "title": "Mirna Path", "description": "Path to miRNA data (Excel , CSV or TSV format)"}, "miRNA_pvalue": {"type": "string", "title": "Mirna Pvalue", "description": "Column name for miRNA p-value"}, "miRNA_genes": {"type": "string", "title": "Mirna Genes", "description": "Column name for miRNA gene symbols"}, "miRNA_pvalue_thresh": {"type": "number", "title": "Mirna Pvalue Thresh", "description": "P-value threshold for the miRNA values", "default": 0.05}, "miRNA_ID_column": {"type": "string", "title": "Mirna Id Column", "description": "Column name for the miRNA IDs."}, "benjamini_threshold": {"type": "number", "title": "Benjamini Threshold", "description": "Benjamini Hochberg p-value threshold for the pathway"}, "save_to_eps": {"type": "string", "title": "Save To Eps", "description": "True/False statement to save the maps and colorscales or legends as seperate .eps files in addition to the .pdf exports", "default": false}}, "type": "object", "title": "MetaKeggPipelineInputParams"}, "PipelineRunStatus": {"properties": {"state": {"type": "string", "enum": ["initialized", "queued", "running", "failed", "success", "expired"], "title": "State", "description": "When a new pipeline run is started it will be `queued` first. After there is slot free in the background worker it start `running`. based on the failure or success of this run the state will be `failed` or `success`. The result of a pipeline run will be cleaned/deleted after 240 minutes and not be available anymore. After that the state will be `expired`", "default": "queued"}, "place_in_queue": {"type": "integer", "title": "Place In Queue", "description": "Shows how many pipeline runs are ahead of a queued pipeline-run", "examples": [4]}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error", "description": "If the state of a pipeline run is `failed`, the error message will be logged into this attribute", "examples": [null]}, "result_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Result Path", "description": "If the state of a pipeline run is `success`, the result can be downloaded from this path.", "examples": [null]}, "ticket": {"$ref": "#/components/schemas/PipelineRunTicket"}, "pipeline_params": {"$ref": "#/components/schemas/MetaKeggPipelineInputParams"}, "pipeline_input_files": {"items": {"type": "string"}, "type": "array", "title": "Pipeline Input Files"}}, "type": "object", "required": ["ticket", "pipeline_params"], "title": "PipelineRunStatus"}, "PipelineRunTicket": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}}, "type": "object", "title": "PipelineRunTicket"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}, "mekeweserver__routes__Error__1": {"properties": {"detail": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Detail", "default": "Pipeline-run could not be found."}}, "type": "object", "title": "Error"}, "mekeweserver__routes__Error__2": {"properties": {"detail": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Detail", "default": "Pipeline-run could not be found."}}, "type": "object", "title": "Error"}, "mekeweserver__routes__Error__3": {"properties": {"detail": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Detail", "default": "Pipeline-run could not be found."}}, "type": "object", "title": "Error"}, "mekeweserver__routes__Error__4": {"properties": {"detail": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Detail", "default": "Pipeline-run expired and result is cleaned."}}, "type": "object", "title": "Error"}, "mekeweserver__routes__Error__5": {"properties": {"detail": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Detail", "default": "Pipeline-run is not finished."}}, "type": "object", "title": "Error"}, "mekeweserver__routes__Error__6": {"properties": {"detail": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Detail", "default": "Pipeline-run failed."}}, "type": "object", "title": "Error"}}}}